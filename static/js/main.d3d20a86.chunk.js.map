{"version":3,"sources":["logo.svg","services/TransactionsAPI.js","data/Currency.js","components/NetWorth.js","App.js","reportWebVitals.js","index.js"],"names":["TransactionsAPI","transactionHistoryEndpoint","exchangeRateEndpoint","getTransactionData","url","request","method","getExchangeRate","currency","EXCHANGE_RATES","NetWorth","props","getTransactions","then","transactionHistoryResponse","console","log","transactions","data","sort","a","b","Date","createdAt","setState","calculateBalances","state","useTransactionTimeExchangeRate","netWorthHistory","forEach","transaction","index","previousBalances","date","change","length","CAD","BTC","ETH","balances","newBalances","Object","assign","type","from","amount","to","direction","netWorth","push","calculateNetWorth","calculateDailyNetWorth","BTCRatesOverTime","ETHRatesOverTime","BTCResponse","ETHResponse","getExchangeRatesOnGivenDay","exchangeRatesOnGivenDay","transactionDay","substring","i","convertBalancesToFiat","exchangeRates","netWorthAmount","this","labels","map","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","React","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3d20a86.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import request from 'axios';\n\nclass TransactionsAPI {\n\n    static transactionHistoryEndpoint = \"https://shakepay.github.io/programming-exercise/web/transaction_history.json\";\n    static exchangeRateEndpoint = \"https://shakepay.github.io/programming-exercise/web/rates_CAD_BTC.json\";\n\n    static getTransactionData = (url) => {\n\n        const apiCompletionPromise = request({\n            method: 'get',\n            url,\n        });\n\n        return apiCompletionPromise;\n    };\n\n    static getExchangeRate = (currency) => {\n\n        const apiCompletionPromise = request({\n            method: 'get',\n            url: `https://shakepay.github.io/programming-exercise/web/rates_CAD_${currency}.json`,\n        });\n\n        return apiCompletionPromise;\n    };\n\n}\n\nexport default TransactionsAPI;","export const EXCHANGE_RATES = {\n    \"CAD_BTC\": 0.00001502,\n    \"BTC_CAD\": 66566.3,\n    \"CAD_ETH\": 0.000428285811176005,\n    \"ETH_CAD\": 2334.88,\n    \"USD_BTC\": 0.00001907,\n    \"BTC_USD\": 52420.81,\n    \"USD_ETH\": 0.000543856595892794,\n    \"ETH_USD\": 1838.72,\n    \"BTC_ETH\": 28.506271379703534,\n    \"ETH_BTC\": 0.03508,\n    \"CAD_USD\": 0.78,\n    \"USD_CAD\": 1.26\n  }","import React from 'react';\nimport {Line} from 'react-chartjs-2';\nimport TransactionsAPI from '../services/TransactionsAPI';\nimport { EXCHANGE_RATES } from '../data/Currency';\n\n\n\n\nclass NetWorth extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            transactions: [],\n            BTCRatesOverTime: [],\n            ETHRatesOverTime: [],\n            netWorthHistory: [],\n            useTransactionTimeExchangeRate: true,\n        }\n    }\n\n    componentDidMount() {\n        this.getTransactions()\n    }\n\n    /**\n     * Get a list of transactions and exchange rate information from the ShakePay API.\n     * Alternatively, since this information is static, we could theoretically also just\n     * save it to a JSON file and access it locally.\n     */\n    getTransactions = () =>  {\n        TransactionsAPI.getTransactionData(TransactionsAPI.transactionHistoryEndpoint)\n        .then(transactionHistoryResponse=> {\n            console.log({transactionHistoryResponse});\n\n            let transactions = transactionHistoryResponse.data;\n            transactions.sort((a,b) => new Date(a.createdAt) - new Date(b.createdAt))\n            console.log({transactions});\n            this.setState({transactions}, () => {\n                this.calculateBalances();\n            })\n        })\n    }\n\n    /**\n     * Given a list of transactions and information about the exchange rate, find the user's\n     * net worth over time.\n     */\n    calculateBalances = () => {\n        const { transactions, useTransactionTimeExchangeRate } = this.state;\n        \n        let netWorthHistory = []\n        transactions.forEach((transaction, index) => {\n            \n\n            let previousBalances, date, change;\n            if (netWorthHistory.length===0) {\n                previousBalances = {\n                    CAD: 0,\n                    BTC: 0,\n                    ETH: 0,\n                };\n                console.log(\"first previousBalances\", previousBalances);\n            } else {\n                // Previous amount is relative to the most recent amount in the networth history\n                previousBalances = netWorthHistory[index-1].balances;\n            }\n\n\n\n            if (index ===0) {\n                console.log({netWorthHistory, transaction, previousBalances});\n                console.log(\"netWorthHistory.length\", netWorthHistory.length)\n            }\n\n            \n            // like the shoe company ;) Use Object.assign to avoid passing by reference and all balances would reference the most recent balance\n            const newBalances = Object.assign({},previousBalances);\n            date = transaction.createdAt;\n            if (transaction.type === \"conversion\") {\n                newBalances[transaction.from.currency] = previousBalances[transaction.from.currency] - transaction.from.amount;\n                newBalances[transaction.to.currency] = previousBalances[transaction.to.currency] + transaction.to.amount;\n\n            } else {\n                change = transaction.direction === \"credit\" ? transaction.amount : transaction.amount * -1;\n                newBalances[transaction.currency] = previousBalances[transaction.currency] + change;\n                \n\n            }\n            const netWorth = {\n                balances: newBalances,\n                date\n            }\n            netWorthHistory.push(netWorth);\n\n        })\n\n        console.log({netWorthHistory});\n        this.setState({netWorthHistory}, () => {\n            this.calculateNetWorth(useTransactionTimeExchangeRate);\n        });\n\n    }\n\n\n    calculateDailyNetWorth = (useTransactionTimeExchangeRate=true) => {\n        const { netWorthHistory } = this.state;\n        let netWorthAmount;\n\n        if (useTransactionTimeExchangeRate) {\n            const { BTCRatesOverTime, ETHRatesOverTime } = this.state;\n\n            if (BTCRatesOverTime.length === 0 || ETHRatesOverTime.length === 0) {\n                TransactionsAPI.getExchangeRate(\"BTC\")\n                .then(BTCResponse => {\n                    console.log({BTCResponse});\n                    this.setState({BTCRatesOverTime: BTCResponse.data}, () => {\n                        TransactionsAPI.getExchangeRate(\"ETH\")\n                        .then(ETHResponse => {\n                            console.log({ETHResponse});\n                            this.setState({ETHRatesOverTime: ETHResponse.data});\n                            this.calculateDailyNetWorth(true);\n                        })\n                    });\n                    \n                })\n            } else {\n                this.calculateDailyNetWorth(true);\n            }\n\n        } else {\n            this.calculateDailyNetWorth(false);\n        }\n\n        \n    }\n\n    getExchangeRatesOnGivenDay = (netWorth) => {\n        const { BTCRatesOverTime, ETHRatesOverTime } = this.state;\n\n        /**\n         * The API uses the pair `CAD_BTC` but the constant exchange rate uses `BTC_CAD`\n         * so we will stick with `BTC_CAD` to stay consistent.\n         */\n        const exchangeRatesOnGivenDay = {\n            \"BTC_CAD\": \"\",\n            \"ETH_CAD\": \"\",\n        }\n        const transactionDay = netWorth.date.substring(0,10);\n\n        for (var i = 0; i < BTCRatesOverTime.length; i++) {\n            const rateDay = BTCRatesOverTime[i].createdAt.substring(0,10)\n            if(transactionDay === rateDay) {\n                exchangeRatesOnGivenDay[\"BTC_CAD\"] = BTCRatesOverTime[i][\"midMarketRate\"];\n                break\n            }\n        }\n\n        for (var i = 0; i < ETHRatesOverTime.length; i++) {\n            const rateDay = ETHRatesOverTime[i].createdAt.substring(0,10)\n            if(transactionDay === rateDay) {\n                exchangeRatesOnGivenDay[\"ETH_CAD\"] = ETHRatesOverTime[i][\"midMarketRate\"];\n                break\n            }\n        }\n\n        return exchangeRatesOnGivenDay;\n\n\n\n    }\n\n    convertBalancesToFiat = (balances, exchangeRates) => {\n\n        const netWorthAmount = balances[\"CAD\"] + (balances[\"BTC\"] * exchangeRates[\"BTC_CAD\"]) + (balances[\"ETH\"] * exchangeRates[\"ETH_CAD\"]);\n\n        return netWorthAmount;\n    }\n\n    calculateNetWorth = (useTransactionTimeExchangeRate=true) => {\n\n        const { netWorthHistory } = this.state;\n\n        netWorthHistory.forEach(netWorth => {\n            \n            let netWorthAmount;\n            if (useTransactionTimeExchangeRate) {\n                const exchangeRatesOnGivenDay = this.getExchangeRatesOnGivenDay(netWorth)\n                netWorthAmount = this.convertBalancesToFiat(netWorth.balances, exchangeRatesOnGivenDay);\n            } else {\n                netWorthAmount = this.convertBalancesToFiat(netWorth.balances, EXCHANGE_RATES);\n            }\n            netWorth.netWorth = netWorthAmount\n        })\n\n        this.setState({netWorthHistory});\n    }\n\n    render() {\n\n        const { netWorthHistory } = this.state\n\n        const data = {\n            labels: netWorthHistory.map(netWorth => netWorth.date),\n            datasets: [\n              {\n                label: 'Net Worth',\n                fill: false,\n                lineTension: 0.1,\n                backgroundColor: 'rgba(75,192,192,0.4)',\n                borderColor: 'rgba(75,192,192,1)',\n                borderCapStyle: 'butt',\n                borderDash: [],\n                borderDashOffset: 0.0,\n                borderJoinStyle: 'miter',\n                pointBorderColor: 'rgba(75,192,192,1)',\n                pointBackgroundColor: '#fff',\n                pointBorderWidth: 1,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\n                pointHoverBorderWidth: 2,\n                pointRadius: 1,\n                pointHitRadius: 10,\n                data: netWorthHistory.map(netWorth => netWorth.netWorth)\n              }\n            ]\n          };\n\n        return (\n          <div>\n            <h2>Net Worth</h2>\n            <Line data={data} />\n          </div>\n        );\n    }\n}\n\nexport default NetWorth;","import logo from './logo.svg';\nimport './App.css';\nimport NetWorth from './components/NetWorth';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NetWorth />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}